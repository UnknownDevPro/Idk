<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Script" referent="RBX0">
		<Properties>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">Script</string>
			<ProtectedString name="Source">local plugin = PluginManager():CreatePlugin()
local button = plugin:CreateToolbar(&quot;OozleDraw&quot;):CreateButton(&quot;&quot;,&quot;Curve&quot;,&quot;http://www.roblox.com/asset/?id=142449776&quot;)
local mouse = plugin:GetMouse()
local width = 0.2
local active = false
local point
local pull = 5
local segments = 20
local preview = true
local mode = true --true = mouse.Hit.p, false = mouse.Target.Position
local curve = 1 --1 = quadratic, 2 = cosine, 3 = hyperbolic cosine

local grey = BrickColor.new(&quot;Medium stone grey&quot;).Color
local green = BrickColor.new(&quot;Bright green&quot;).Color
local red = BrickColor.new(&quot;Bright red&quot;).Color

local gui = Instance.new(&quot;ScreenGui&quot;,game:GetService(&quot;CoreGui&quot;))
gui.Name = &quot;LineGui&quot;

local frame = Instance.new(&quot;Frame&quot;,gui)
frame.Visible = false
frame.BorderSizePixel = 0
frame.BackgroundTransparency = 1
frame.Position = UDim2.new(0.5,-200,0,0)
frame.Size = UDim2.new(0,400,0,40)

local widthlabel = Instance.new(&quot;TextLabel&quot;,frame)
widthlabel.BorderSizePixel = 0
widthlabel.BackgroundTransparency = 0.5
widthlabel.BackgroundColor3 = grey
widthlabel.Size = UDim2.new(1/6,0,0.5,0)
widthlabel.Text = &quot;line width:&quot;
local widthtextbox = Instance.new(&quot;TextBox&quot;,frame)
widthtextbox.BorderSizePixel = 0
widthtextbox.BackgroundTransparency = 0.5
widthtextbox.BackgroundColor3 = green
widthtextbox.Position = UDim2.new(1/6,0,0,0)
widthtextbox.Size = UDim2.new(1/6,0,0.5,0)
widthtextbox.Text = &quot;0.2&quot;

local modelabel = Instance.new(&quot;TextLabel&quot;,frame)
modelabel.BorderSizePixel = 0
modelabel.BackgroundTransparency = 0.5
modelabel.BackgroundColor3 = grey
modelabel.Position = UDim2.new(2/6,0,0,0)
modelabel.Size = UDim2.new(1/6,0,0.5,0)
modelabel.Text = &quot;point mode:&quot;
local modebutton = Instance.new(&quot;TextButton&quot;,frame)
modebutton.BorderSizePixel = 0
modebutton.BackgroundTransparency = 0.5
modebutton.BackgroundColor3 = green
modebutton.Position = UDim2.new(3/6,0,0,0)
modebutton.Size = UDim2.new(1/6,0,0.5,0)
modebutton.Text = &quot;mouse.Hit&quot;

local previewlabel = Instance.new(&quot;TextLabel&quot;,frame)
previewlabel.BorderSizePixel = 0
previewlabel.BackgroundTransparency = 0.5
previewlabel.BackgroundColor3 = grey
previewlabel.Position = UDim2.new(4/6,0,0,0)
previewlabel.Size = UDim2.new(1/6,0,0.5,0)
previewlabel.Text = &quot;preview:&quot;
local previewbutton = Instance.new(&quot;TextButton&quot;,frame)
previewbutton.BorderSizePixel = 0
previewbutton.BackgroundTransparency = 0.5
previewbutton.BackgroundColor3 = green
previewbutton.Position = UDim2.new(5/6,0,0,0)
previewbutton.Size = UDim2.new(1/6,0,0.5,0)
previewbutton.Text = &quot;true&quot;

local curvelabel = Instance.new(&quot;TextLabel&quot;,frame)
curvelabel.BorderSizePixel = 0
curvelabel.BackgroundTransparency = 0.5
curvelabel.BackgroundColor3 = grey
curvelabel.Position = UDim2.new(0,0,0.5,0)
curvelabel.Size = UDim2.new(1/6,0,0.5,0)
curvelabel.Text = &quot;curve type:&quot;
local curvebutton = Instance.new(&quot;TextButton&quot;,frame)
curvebutton.BorderSizePixel = 0
curvebutton.BackgroundTransparency = 0.5
curvebutton.BackgroundColor3 = green
curvebutton.Position = UDim2.new(1/6,0,0.5,0)
curvebutton.Size = UDim2.new(1/6,0,0.5,0)
curvebutton.Text = &quot;quadratic&quot;

local pulllabel = Instance.new(&quot;TextLabel&quot;,frame)
pulllabel.BorderSizePixel = 0
pulllabel.BackgroundTransparency = 0.5
pulllabel.BackgroundColor3 = grey
pulllabel.Position = UDim2.new(2/6,0,0.5,0)
pulllabel.Size = UDim2.new(1/6,0,0.5,0)
pulllabel.Text = &quot;gravity pull:&quot;
local pulltextbox = Instance.new(&quot;TextBox&quot;,frame)
pulltextbox.BorderSizePixel = 0
pulltextbox.BackgroundTransparency = 0.5
pulltextbox.BackgroundColor3 = green
pulltextbox.Position = UDim2.new(3/6,0,0.5,0)
pulltextbox.Size = UDim2.new(1/6,0,0.5,0)
pulltextbox.Text = &quot;5&quot;

local segmentslabel = Instance.new(&quot;TextLabel&quot;,frame)
segmentslabel.BorderSizePixel = 0
segmentslabel.BackgroundTransparency = 0.5
segmentslabel.BackgroundColor3 = grey
segmentslabel.Position = UDim2.new(4/6,0,0.5,0)
segmentslabel.Size = UDim2.new(1/6,0,0.5,0)
segmentslabel.Text = &quot;segments:&quot;
local segmentstextbox = Instance.new(&quot;TextBox&quot;,frame)
segmentstextbox.BorderSizePixel = 0
segmentstextbox.BackgroundTransparency = 0.5
segmentstextbox.BackgroundColor3 = green
segmentstextbox.Position = UDim2.new(5/6,0,0.5,0)
segmentstextbox.Size = UDim2.new(1/6,0,0.5,0)
segmentstextbox.Text = &quot;20&quot;

function drawline(p1,p2,container,transparency)
&#9;local distance = (p1-p2).magnitude
&#9;local line = Instance.new(&quot;Part&quot;,container)
&#9;line.Name = &quot;LineSegment&quot;
&#9;line.BrickColor = BrickColor.new(&quot;Really black&quot;)
&#9;line.Transparency = transparency
&#9;line.Anchored = true
&#9;line.CanCollide = false
&#9;line.TopSurface = Enum.SurfaceType.Smooth
&#9;line.BottomSurface = Enum.SurfaceType.Smooth
&#9;line.formFactor = Enum.FormFactor.Custom
&#9;line.Size = Vector3.new(width,width,distance)
&#9;line.CFrame = CFrame.new(p1,p2)*CFrame.new(0,0,-distance/2)
end

function drawcosinecurve(p1,p2,container,transparency)
&#9;for i=1,segments do
&#9;&#9;drawline(
&#9;&#9;&#9;p1+((p2-p1)/segments*(i-1))+Vector3.new(0,(math.cos(math.rad(360*(i-1)/segments))-1)*pull/2,0),
&#9;&#9;&#9;p1+((p2-p1)/segments*i)+Vector3.new(0,(math.cos(math.rad(360*i/segments))-1)*pull/2,0),
&#9;&#9;&#9;container,
&#9;&#9;&#9;transparency
&#9;&#9;)
&#9;end
end

--y = -x^2+10x+0
function drawquadraticcurve(p1,p2,container,transparency)
&#9;for i=1,segments do
&#9;&#9;local x = 10*((i-1)/segments)
&#9;&#9;local x2 = 10*(i/segments)
&#9;&#9;drawline(
&#9;&#9;&#9;p1+((p2-p1)/segments*(i-1))+Vector3.new(0,(-x^2+10*x)/25*-pull,0),
&#9;&#9;&#9;p1+((p2-p1)/segments*i)+Vector3.new(0,(-x2^2+10*x2)/25*-pull,0),
&#9;&#9;&#9;container,
&#9;&#9;&#9;transparency
&#9;&#9;)
&#9;end
end

--y = (cosh(x)-1)/(cosh(1)-1)
function drawcoshcurve(p1,p2,container,transparency)
&#9;for i=1,segments do
&#9;&#9;local x = ((((i-1)*2)/segments)-1)
&#9;&#9;local x2 = (((i*2)/segments)-1)
&#9;&#9;drawline(
&#9;&#9;&#9;p1+((p2-p1)/segments*(i-1))+Vector3.new(0,(((math.cosh(x)-1)/(math.cosh(1)-1))-1)*pull,0),
&#9;&#9;&#9;p1+((p2-p1)/segments*i)+Vector3.new(0,(((math.cosh(x2)-1)/(math.cosh(1)-1))-1)*pull,0),
&#9;&#9;&#9;container,
&#9;&#9;&#9;transparency
&#9;&#9;)
&#9;end
end

button.Click:connect(function()
&#9;active = not active
&#9;local active2 = active
&#9;plugin:Activate(active)
&#9;active = active2
&#9;button:SetActive(active)
&#9;frame.Visible = active
end)

mouse.Button1Down:connect(function()
&#9;if active then
&#9;&#9;local currentpoint
&#9;&#9;if mode and mouse.Hit then --mouse.Hit
&#9;&#9;&#9;currentpoint = mouse.Hit.p
&#9;&#9;elseif mouse.Target then
&#9;&#9;&#9;currentpoint = mouse.Target.Position
&#9;&#9;end
&#9;&#9;if point then --draw line
&#9;&#9;&#9;local container = Instance.new(&quot;Model&quot;,workspace)
&#9;&#9;&#9;container.Name = &quot;Curve&quot;
&#9;&#9;&#9;if curve == 1 then
&#9;&#9;&#9;&#9;drawquadraticcurve(point,currentpoint,container,0)
&#9;&#9;&#9;elseif curve == 2 then
&#9;&#9;&#9;&#9;drawcosinecurve(point,currentpoint,container,0)
&#9;&#9;&#9;elseif curve == 3 then
&#9;&#9;&#9;&#9;drawcoshcurve(point,currentpoint,container,0)
&#9;&#9;&#9;end
&#9;&#9;&#9;point = nil
&#9;&#9;else --set point 1
&#9;&#9;&#9;point = currentpoint
&#9;&#9;end
&#9;end
&#9;Spawn(function()
&#9;&#9;while preview and active and point and wait() do
&#9;&#9;&#9;local container = Instance.new(&quot;Model&quot;,workspace)
&#9;&#9;&#9;container.Name = &quot;LinePreview&quot;
&#9;&#9;&#9;container.Archivable = false
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;local point2
&#9;&#9;&#9;&#9;if mode and mouse.Hit then
&#9;&#9;&#9;&#9;&#9;point2 = mouse.Hit.p
&#9;&#9;&#9;&#9;elseif mouse.Target and mouse.Target.Position ~= nil then
&#9;&#9;&#9;&#9;&#9;point2 = mouse.Target.Position
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if curve == 1 then
&#9;&#9;&#9;&#9;&#9;drawquadraticcurve(point,point2,container,0.5)
&#9;&#9;&#9;&#9;elseif curve == 2 then
&#9;&#9;&#9;&#9;&#9;drawcosinecurve(point,point2,container,0.5)
&#9;&#9;&#9;&#9;elseif curve == 3 then
&#9;&#9;&#9;&#9;&#9;drawcoshcurve(point,point2,container,0.5)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;Delay(0,function()
&#9;&#9;&#9;&#9;container:Destroy()
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end)
end)

widthtextbox.Changed:connect(function()
&#9;if tonumber(widthtextbox.Text) then
&#9;&#9;widthtextbox.BackgroundColor3 = green
&#9;&#9;width = tonumber(widthtextbox.Text)
&#9;else
&#9;&#9;widthtextbox.BackgroundColor3 = red
&#9;end
end)

modebutton.MouseButton1Down:connect(function()
&#9;mode = not mode
&#9;if mode then
&#9;&#9;modebutton.Text = &quot;mouse.Hit&quot;
&#9;else
&#9;&#9;modebutton.Text = &quot;mouse.Target&quot;
&#9;end
end)

previewbutton.MouseButton1Down:connect(function()
&#9;preview = not preview
&#9;if preview then
&#9;&#9;previewbutton.Text = &quot;true&quot;
&#9;&#9;previewbutton.BackgroundColor3 = green
&#9;else
&#9;&#9;previewbutton.Text = &quot;false&quot;
&#9;&#9;previewbutton.BackgroundColor3 = red
&#9;end
end)

curvebutton.MouseButton1Down:connect(function()
&#9;curve = (curve%3)+1
&#9;if curve == 1 then
&#9;&#9;curvebutton.Text = &quot;quadratic&quot;
&#9;elseif curve == 2 then
&#9;&#9;curvebutton.Text = &quot;cosine&quot;
&#9;elseif curve == 3 then
&#9;&#9;curvebutton.Text = &quot;hyperbolic cos&quot;
&#9;end
end)

pulltextbox.Changed:connect(function()
&#9;if tonumber(pulltextbox.Text) then
&#9;&#9;pulltextbox.BackgroundColor3 = green
&#9;&#9;pull = tonumber(pulltextbox.Text)
&#9;else
&#9;&#9;pulltextbox.BackgroundColor3 = red
&#9;end
end)

segmentstextbox.Changed:connect(function()
&#9;if tonumber(segmentstextbox.Text) and tonumber(segmentstextbox.Text) &gt; 0 then
&#9;&#9;segmentstextbox.BackgroundColor3 = green
&#9;&#9;segments = tonumber(segmentstextbox.Text)
&#9;else
&#9;&#9;segmentstextbox.BackgroundColor3 = red
&#9;end
end)

plugin.Deactivation:connect(function()
&#9;active = false
&#9;button:SetActive(false)
&#9;frame.Visible = false
end)</ProtectedString>
		</Properties>
	</Item>
</roblox>